
Reference
---------
https://dev.to/omer95/docker-container-on-azure-functions-with-python-1lgd
https://nanonets.com/blog/ocr-with-tesseract/

Note: 
-------
We are doing everything on Docker Server itself.Its CENTOS7 server.






PART 1 of DOCUMENT:
------------------- 
We will write a simple python code , which accept image as argument and process data i.e fetch text from image and return back the result on screen.

1. install python3.
# rpm -qf /bin/python3
python3-3.6.8-18.el7.x86_64



2. 
Installing tesseract-OCR .(We Did not faced this issue when run in ubuntu container)
Note : tesseract-3.04.01 need ERROR - configure: error: leptonica library missing
-------------------------------------

# echo "Install leptonica  first"
#cd /usr/src \
 &&git clone https://github.com/DanBloomberg/leptonica.git --depth 1 \
 &&cd /usr/src/leptonica \
 &&./autogen.sh \
 &&./configure --prefix=/usr/local \
 &&make&&make install
#export LIBLEPT_HEADERSDIR=/usr/local/include


# echo "Install tesseract now" 
# cd /tmp
# wget https://github.com/tesseract-ocr/tesseract/archive/3.04.01.tar.gz
# mv 3.04.01.tar.gz tesseract-3.04.01.tar.gz
# tar xzvf tesseract-3.04.01.tar.gz
# cd tesseract-3.04.01/
#./configure --with-extra-libraries=/usr/local/lib
# tesseract --version
tesseract 3.04.01
 leptonica-1.81.0
  libpng 1.5.13 : zlib 1.2.7
# which tesseract
/usr/local/bin/tesseract
#




3.Install pillow and pytesseract
# python3 -m pip list installed  --format=columns | egrep -i "pillow|pytesseract"
Pillow                                8.1.0
pytesseract                           0.3.7



4. Lets code in Python:imgToText.py
# cat > ./imgToText.py
#########################################################################################
#!/usr/bin/python3
import argparse
import pytesseract
from PIL import Image

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
# Ensuring user must pass argument to the script. -f path_to_img_file
ap.add_argument("-f", "--file", required=True, help="path to image file, containing text")
# Creating dictionary of arguments passed the script.
cli_argument_dict = vars(ap.parse_args())
# Fetching file value which is path to image file.
path_to_image_file = cli_argument_dict["file"]

text = ''
if path_to_image_file:
    text = str(pytesseract.image_to_string(Image.open(path_to_image_file)))
    print(text)
#############################################################################################



Note:
------
got error when ecxecuted above code.Error: opening data file /usr/local/share/tessdata/eng.traineddata. Please make sure the TESSDATA_PREFIX environment variable 
is set to the parent directory of your "tessdata" directory. Failed loading language eng Tesseract couldn't load any languages! Could not initialize tesseract.
Solution: wget https://github.com/tesseract-ocr/tessdata/raw/master/eng.traineddata .All languages are available at https://github.com/tesseract-ocr/tessdata




5. Able to execute code without any issues now.
# ./imgToText.py -f ./screenShots/exampleOfImagePlainText01.PNG
# ./imgToText.py -f ./screenShots/exampleOfImagePlainTextWithPicsInIt.PNG















PART2 of Document : convert image to text to run on Azure function as a docker container.
-----------------

1. create Azure Account


2. install Azure Functions core tools(https://github.com/Azure/azure-functions-core-tools)
#cd /opt/azure-functions-cli
#chmod +x func
#chmod +x gozip
#./fun
#export PATH=$PATH:/opt/azure-functions-cli: (set in .bashrc)


3. install azure cli 
#python3 -m pip list installed| grep cli
DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.
azure-cli (2.17.1)
azure-cli-core (2.17.1)
azure-cli-telemetry (1.0.6)
# which az
/usr/local/bin/az


4. install docker 
# rpm -qa | grep -i docker
docker-ce-cli-20.10.2-3.el7.x86_64
docker-ce-20.10.2-3.el7.x86_64
docker-ce-rootless-extras-20.10.2-3.el7.x86_64



5. account on Docker Hub: https://hub.docker.com/
amitsuneja007@gmail.com
password is SECRET



6.  Initialize function directory.
# cd /root
# mkdir app
# cd app
#########################################################################################
# func init OcrFunctionsProject --worker-runtime python --docker (#func init --docker)
#########################################################################################
Found Python version 3.6.8 (python3).
Writing requirements.txt
Writing .gitignore
Writing host.json
Writing local.settings.json
Writing /root/app/OcrFunctionsProject/.vscode/extensions.json
Writing Dockerfile
Writing .dockerignore

# tree /root/app/OcrFunctionsProject
OcrFunctionsProject
├── Dockerfile
├── host.json
├── local.settings.json
└── requirements.txt
0 directories, 4 files
#



7. Make changes to docker file

# pwd
/root/app/OcrFunctionsProject
# cat Dockerfile
##################################################################################################
FROM mcr.microsoft.com/azure-functions/python:3.0-python3.7

ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
AzureFunctionsJobHost__Logging__Console__IsEnabled=true

COPY requirements.txt /

RUN pip install -r /requirements.txt

RUN apt-get update && apt-get install -y tesseract-ocr

# this will copy there files inside the docker image(Dockerfile  HttpOcrFunc  host.json  requirements.txt)
COPY . /home/site/wwwroot
###################################################################################################






8. Add a function to the project using the following command. The --name option specifies a unique name for the function and --template specifies the trigger. 

In our case we want our function to run in response to an HTTP trigger.
# pwd
/root/app/OcrFunctionsProject


# func new --name HttpOcrFunc --template "HTTP trigger" (#func new)
###################################################################################################
Select a number for template:HTTP trigger
Function name: [HttpTrigger] Writing /root/app/OcrFunctionsProject/HttpOcrFunc/__init__.py
Writing /root/app/OcrFunctionsProject/HttpOcrFunc/function.json
The function "HttpOcrFunc" was created successfully from the "HTTP trigger" template.
###################################################################################################






9.Add pytesseract and pillow as a new line to the requirements.txt file so that modules are automatically installed once our container is deployed on the 
Azure Functions app in the cloud. 
# pwd
/root/app/OcrFunctionsProject
# cat requirements.txt
 azure-functions
 pytesseract
 pillow






10. test your function to start it.
# pwd
/root/app/OcrFunctionsProject
# func start
Found Python version 3.6.8 (python3).
Azure Functions Core Tools
Core Tools Version:       3.0.3233 Commit hash: d1772f733802122a326fa696dd4c086292ec0171
Function Runtime Version: 3.0.15193.0
Functions:
        HttpOcrFunc: [GET,POST] http://localhost:7071/api/HttpOcrFunc
For detailed output, run func with --verbose flag.
[2021-01-20T03:02:10.295Z] Worker process started and initialized.
[2021-01-20T03:02:15.063Z] Host lock lease acquired by instance ID '00000000000000000000000084F26538'.


11. check if function is able to serve clients.From new terminal.
# curl http://localhost:7071/api/HttpOcrFunc
This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.





12.Edit the OcrFunctionsProject/HttpOcrFunc/__init__.py file and add the following code:This is main file of python code. You need to read your /root/app/imgToText.py 
to write this init file. Ofcourse you need to change the code according to function.

# cat __init__.py
###############################################################################################################################
import logging
import pytesseract
from PIL import Image
import azure.functions as func
import os
# defining a main fuction , it need one arg func.HttpRequest and we will store it in variable req.(req: func.HttpRequest)
# and output of this function is func.HttpResponse (-> func.HttpResponse: )
def main(req: func.HttpRequest) -> func.HttpResponse: 
    
    # Log the information when function trigger.
    logging.info('Python HTTP trigger function processed a request.')
 
    # test code for OCR
    try:
        # ('file') this file is argument passed by http request coming via browser or postman .
        file = req.files.get('file')
        file.save('/tmp/1.jpg')
    except ValueError:
        pass

    text = ''
    if file: # if file is present then extract text from it.
        text = str(pytesseract.image_to_string(Image.open('/tmp/1.jpg')))
    
    # return the extracted text via http response. (func.HttpResponse)
    return func.HttpResponse('text Extracted from Image: {}'.format(text))
###############################################################################################################################






13. Build docker image.
# ls
Dockerfile  host.json  HttpOcrFunc  local.settings.json  requirements.txt
# docker build --tag amitsuneja007/ocrfunctionsimage:v1.0.0 .
[root@docker01 OcrFunctionsProject]# docker images
REPOSITORY                                 TAG             IMAGE ID       CREATED              SIZE
amitsuneja007/ocrfunctionsimage            v1.0.0          33a00441f7da   About a minute ago   1.07GB
mcr.microsoft.com/azure-functions/python   3.0-python3.7   fa05a2dc613c   5 weeks ago          1.02GB





14. try running docker image locally and explore it befure pushing it to docker hub.
# docker run --name testcontainer  -it amitsuneja007/ocrfunctionsimage:v1.0.0  /bin/bash
#############################################################################################
root@20b30c2326ac:/# ls
FuncExtensionBundles  bin   dev  home  lib64  mnt  proc              root  sbin  sys  usr
azure-functions-host  boot  etc  lib   media  opt  requirements.txt  run   srv   tmp  var
root@20b30c2326ac:/# env
HOSTNAME=20b30c2326ac
PYTHON_VERSION=3.7.9
AzureFunctionsJobHost__Logging__Console__IsEnabled=true
ASPNETCORE_URLS=http://+:80
PWD=/
FUNCTIONS_WORKER_RUNTIME_VERSION=3.7
AzureWebJobsScriptRoot=/home/site/wwwroot
FUNCTIONS_WORKER_RUNTIME=python
HOME=/home
LANG=C.UTF-8
GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
TERM=xterm
ACCEPT_EULA=Y
HOST_VERSION=3.0.15185
SHLVL=1
DOTNET_RUNNING_IN_CONTAINER=true
DOTNET_USE_POLLING_FILE_WATCHER=true
PYTHON_PIP_VERSION=20.3.1
PYTHON_GET_PIP_SHA256=d48ae68f297cac54db17e4107b800faae0e5210131f9f386c30c0166bf8d81b7
PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/91630a4867b1f93ba0a12aa81d0ec4ecc1e7eeb9/get-pip.py
PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
root@20b30c2326ac:/# cd /usr/share/tesseract-ocr/4.00/tessdata
root@20b30c2326ac:/usr/share/tesseract-ocr/4.00/tessdata# ls -ltr
total 14344
-rw-r--r--. 1 root root  4113088 Sep 15  2017 eng.traineddata
-rw-r--r--. 1 root root 10562727 Sep 15  2017 osd.traineddata
-rw-r--r--. 1 root root      572 Jan 21  2019 pdf.ttf
drwxr-xr-x. 2 root root       98 Jan 20 03:11 tessconfigs
drwxr-xr-x. 2 root root     4096 Jan 20 03:11 configs
root@20b30c2326ac:/usr/share/tesseract-ocr/4.00/tessdata# cd /home/site/wwwroot
root@20b30c2326ac:~/site/wwwroot# ls -ltr
total 12
-rw-r--r--. 1 root root 288 Jan 20 02:17 host.json
-rw-r--r--. 1 root root 311 Jan 20 02:20 Dockerfile
-rw-r--r--. 1 root root 131 Jan 20 02:54 requirements.txt
drwxr-xr-x. 3 root root  65 Jan 20 03:06 HttpOcrFunc
root@20b30c2326ac:~/site/wwwroot# exit
exit
#############################################################################################







15. 
# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: amitsuneja007
Password:
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
Login Succeeded
# docker push amitsuneja007/ocrfunctionsimage:v1.0.0








PART3. of Document : Create Azure Functions App
-------------------

1. portal > Azure Function App > Add 
Refer to Capture1.PNG , Capture2.PNG , Capture3.PNG, Capture4.PNG

2. portal > Azure Function App > amitsunejafuncapp > Functions > HttpOcrFunc Function> get Function URL.

3. Download Postman https://www.postman.com/ and create a new GET request. Paste the Function URL in the GET request endpoint field and in the body tab, 
select form-data, then add a key called file, change the type from Text to File, and in the value field upload any image with text in it. Click submit!
Capture5.png,Capture6.png,Capture7.png

Note: Now if you explore you storage account you have used for this function , then you will see 2 containers get created in storage named as
      azure-webjobs-hosts and  azure-webjobs-secrets

Note: Now you need to create front end app using azure web functions.






























